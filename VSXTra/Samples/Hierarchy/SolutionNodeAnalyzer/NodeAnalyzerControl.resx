<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="NodeImages.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="NodeImages.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAs
        DwAAAk1TRnQBSQFMAgEBAwEAAQQBAAEEAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABEAMAAQEBAAEYBgABDB4AAeEB6QHhAY4BtQGPAVYBkwFYAT0BggFAAT0BggFAAVIBjwFVAYUBrQGG
        AdoB5AHaPwAB6AHaAdAB0QGiAYUBwgF4AUsBvQFvATsBvQFvATsBvQFvATsBvQFuATsBvQFuATsBvAFu
        AToBvAFuAToBvAFtAToBvgF0AUQB0AGhAYMB6gHdAdU5AAH8Af0B/AGTAb0BlgE/AY0BRAGbAcUBnQGz
        AcIBnQG9AcEBnAG+AcMBnQGwAdIBsQF+AcABmgEyAX0BNQGCAawBgwP6OQABxwGIAV8B9gHxAeoB9wHs
        Ad8B9gHrAd4B9gHqAd4B9gHqAdwB9gHqAdwB+gHzAesB+gHzAesB+gHyAeoB/AH3AfMB/AH4AfQC+wH6
        AccBigFkNgAB/AH9AfwBfAG1AYEBcAG3AYYBrgHoAccBwAHSAaABxQGzAYEBygG0AX0BzAGvAXgBuQGn
        AXgBgAHMAZUBoAHaAbwBZgGoAXoBYgGYAWQB+QH6AfkGAAHLAd0B7QGcAcMB5QFKAZYB2gE5AY8B2QE5
        AY8B2QE5AY8B2QE5AY8B2QE5AY8B2QE5AY8B2QE5AY8B2QE5AY8B2QE5AY4B2QFCAZMB2gGuAcwB5wYA
        AcIBegFGAfUB6wHfAf0BvwFoAfwBvQFnAfsBvgFlAfwBvgFkAfwBvgFkAfwBvQFiAfsBvQFjAfsBvAFh
        AfwBvgFgAfwBvAFiAf0B+wH4Ab0BcAE/NgABoQHMAaUBdgHAAY0BmQHXAbMBeQHAAYABvAHCAX4BxgGp
        AWoB1wGxAWkB1gGtAWUBvAGbAV4BYAGtAWoBWQGXAWgBgQHBAZkBZwGpAXsBggGsAYMGAAFVAZ8C3QHv
        AfcBqQHdAfQBngHbAfQBlgHaAfMBjgHYAfMBhgHXAfMBfwHUAfIBeQHTAfIBcgHSAfEBbAHQAfEBaQHP
        AfEBwgHqAfgBRwGYAdoGAAHEAX8BRwH3Ae0B4wH9AcIBbgH/AdgBoAH/AdcBngH/AdYBmwH/AdcBmAH/
        AdYBlgH/AdYBlQH/AdUBlAH/AdQBkwH7Ab4BZQH7AfcB9AG+AXABPDMAAeoB8AHqAVgBsAFiAbUB6gHT
        AWkBvAF0AW4BvQFxAb4BtgFtAckBowFbAd8BqwFbAd0BqAFYAcEBkgFOAZ0BqQFYAXgBsQFmAVoBlgFn
        AaYB3AHAATEBfAE0AdsB5QHcAwABQAGZAdsB7wH6Af4BoQHpAfkBkQHlAfgBgQHhAfcBcgHeAfYBYwHa
        AfUBVAHXAfQBRwHTAfMBOQHQAfIBLgHNAfEBJgHLAfABygHyAfsBQAGZAdsGAAHHAYMBSwH3AfAB5gH4
        AbQBVQH3AbQBVgH3AbUBVAH4AbQBUwH4AbIBUwH3AbMBUgH3AbMBUgH3AbIBUQH3AbIBTwH3AbIBTwH8
        AfkB9QHCAXcBQTMAAaYB1AGrAZIB1wGvAaAB3gG0AYQBxgFwAagB0AGAAcUBpQFcAdABpwFXAeABqgFW
        AdoBpgFRAccBmAFKAbkBjAFHAbYBmwFXAYEBnwFlAXkBvwGQAYEBvgGcAYIBrAGDAwABQAGfAdsB8gH6
        Af0BswHtAfoBpAHpAfkBlQHmAfgBhQHiAfcBdgHeAfYBZQHbAfUBVwHXAfQBSQHUAfMBOwHRAfIBMAHO
        AfEBzAHyAfsBQAGdAdsGAAHIAYcBTQH4AfEB6AH+AeUB1QH9AeUB0wH9AeUB0wH8AeUB0wH8AeUB0wH8
        AeQB0QH8AeIBzgH8AeIBzAH7AeAByQH7AeEByAH9AfoB9wHEAX0BRjMAAXoByAGEAbAB6QHPAYMB1AGQ
        Ab8B3AGKAcMBywGCAcwBogFWAdoBrwFcAdwBrwFbAckBmgFLAb8BhgFDAbcBhAFDAbkBmgFSAZYBpQFi
        AWUBpgF2AaIB2AG9AU8BjQFRAwABPwGkAdsB9gH8Af4ByAHyAfwBuQHvAfsBrAHsAfoBnAHoAfkBiwHj
        AfcBfAHgAfYBbAHcAfYBXQHZAfUBTwHWAfQBRAHTAfMB0AHzAfwBQAGkAdsGAAHIAYkBUAH4AfIB6wH+
        AecB1gH9AecB1gH9AecB1gH9AecB1gH9AeYB1QH9AeUB0wH8AeQB0QH8AeIBzQH7AeEBywH7AeEByQH7
        AfcB8gHIAYMBSjMAAWkBxQF1Ab4B7wHdAXMB0QF9AZAB0QFsAbwB4AGeAccBpwFeAdMBsAFeAcYBmQFT
        AcYBvAFuAa8B0QF6AbQBxAFtAa8BqQFfAXsBqQFXAVoBowFnAbEB4wHOATwBhQFAAwABPgGpAdsB/gL/
        AfgB/QH/AfYB/QH/AfUB/AH/AfMB/AH+AdgB9gH8AZQB5gH4AYUB4wH3AXYB3wH2AWgB2wH1AVwB2AH0
        AdcB9AH8AUABqQHbBgAByQGLAVIB+QHzAewB/gHoAdYB/gHoAdcB/QHnAdYB/QHnAdYB/QHnAdUB/QHl
        AdMB+wHkAdAB+wHjAcwB+gHfAccB+gHfAcYB+gHyAeoByQGHAU0zAAFrAcYBeAG+AfAB3AGBAdgBgwF3
        AdsBbQG/AeUBmgHMAd8BpwHKAagBXQHCAb0BbAG4AdoBiwGmAdgBYAF3AdEBPwFqAdABRgFZAbwBUAFj
        AasBbAGyAeQBzgFBAYgBRQMAATwBrgHbAegB9gH7AZQB1AHvAYgBzgHuAXMBwQHpAckB6QH2AfIB/AH+
        AfMB/AH+AfIB/AH+AfAB/AH+Ae8B+wH+Ae4B+wL+Av8BQQGwAdsGAAHJAY8BVAH5AfQB7QH+AegB2AH+
        AegB2AH+AegB1wH+AecB1gH9AeUB0wH8AeQB0QH7AeEBzAH6AeABxwH5Ad0BwwH4AdwBwgH6AfQB7QHJ
        AYkBUDMAAX4BzAGIAbMB7AHSAZsB4gGiAZ0B6gGNAdQB7QG3AdAB6gHHAc8BuQFuAcwBsQFmAcsByQF1
        AXYB2wFnAWYB2QFNAWUB1wFNAWwB0wFdAXMBuwF+AaUB2wHCAVoBmwFeAwABSAGwAdwB8QH6Af0BlAHe
        AfUBkwHcAfQBgQHVAfIBagHKAe0BbAHLAeoBhQHTAe8BgAHSAe8BegHQAe8BdgHPAe4BcgHPAe4B6QH3
        AfsBRQG0AdwGAAHJAY8BVQH5AfQB7wH+AecB1wH9AecB1gH9AecB1QH9AeYB1AH8AeYB0gH7AeEBzAH6
        Ad8BxwH4AdwBwgH2AdoBvQH2AdgBuwH6AfQB7wHJAYoBUTMAAa0B2gGzAZgB3gK1AesBzAGxAe8BpwHJ
        Ae4BqQHRAeoByQHVAc8BjQHZAcsBiwHNAbQBZgK8AWcBmgHWAXEBggHeAXMBegHcAXEBkQHQAaMBiAHI
        AaQBkAG8AZQDAAFJAbYB2wH3AfwB/gGOAeQB+AGRAd4B9QGfAeAB9QGsAeEB9gHvAfsB/gH0Af0B/gHz
        AfwB/gHxAfwB/gHvAfsB/gHuAfsB/gH5AfwB/gFuAcEB3wYAAckBkAFVAfkB9AHwAfwB5gHTAfwB5gHU
        Af0B5wHTAfwB5AHRAfsB4wHNAfoB4AHIAfgB3AHCAfUB1gG7AfMB1AG1AfEB0gGzAfgB9AHwAccBiQFR
        MwAB7gH0Ae8BZgHFAXMBwAHzAeIBtQHvAbQBtQHwAawBwQHtAbcB1AHjAbcB2QHYAZwB2gHTAZUBzQG1
        AW0BxwGzAW0BtQHLAYQBlAHfAZoBrwHnAc0BSQGcAVAB4wHrAeQDAAFAAbYB2wH9A/4C/wL+Af8B/QH+
        Af8B/gL/AeoB9wH7AXAByAHlAXIBygHkAXIBygHkAXIBygHkAYAB0AHnAY4B0QHmAd4B7AHxBgAByQGQ
        AVUB+QH1AfEB/AHjAc8B+wHkAdAB/AHkAc8B/AHjAc0B+gHhAcoB+QHdAcQB9gHZAbwB9AHpAd8B9wHy
        AewB+wH3AfMB9QHvAekBwwGBAUo2AAGzAdwBuAGHAdcBoAHAAfIB3gHHAfIB1gHVAe8B1QHQAekBzwHV
        AdsBpgHcAd4BqwHbAc0BkAHXAcgBiwHJAcEBjgG9AdUBrwF6AccBkQGaAccBngYAAXEBxwHfAWMBwwHi
        AWUBxAHjAWUBxAHjAWUBxAHjAWQBxAHjAWcBwwHfAfoC+w/8A/4GAAHIAY8BVgH5AfUB8QH8AeMBzQH7
        AeMBzgH7AeMBzQH7AeIBywH5AeAByAH4AdwBwgH1AdYBugH9AfsB+AH8AeYBzQH6AeUByQHiAbYBhAHa
        Ab0BpTYAA/4BmgHVAaIBjAHYAaIBzQH1AegB1AHtAdoBzgHtAdMBzwHfAa8B1gHeAbUC1AGiAc4B0AGh
        AcQB0AGqAYcByQGRAYUBwgGLA/w2AAHLAZcBZAH5AfUB8QH6AeABxwH7AeEByQH7AeIByQH7AeAByAH5
        Ad8BxQH4AdsBwQH0AdYBuAH/AfsB+AH2AdgBtAHhAbABfQHbAZgBbAP+OQAD/gGzAdwBuQFoAccBdQGl
        AeEBuwG6AeoBzAHFAeABvgHFAdoBtAG9AdcBsAGmAdcBrAFiAb8BbAGiAdMBqAP9OQAB1QGwAY0B9gHx
        AewB9wHzAe0B+AH0Ae0B+AHzAe0B+AHzAe0B+AHzAe0B+AHyAewB9wHyAewB8gHmAdcB4gGyAX0B2wGa
        AW8D/kIAAe4B9AHvAa8B2wG0AYEBzAGLAW0ByAF4AWgBxwF1AXgBygGDAakB2QGvAekB8QHqPwAB7AHi
        AdoB2QG4AZYBzQGYAWMBygGSAVkBywGTAVkBywGTAVkBywGTAVkBzAGTAVkBygGSAVkB0QGoAXwB4QHI
        AbUD/jkAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcAA/8BAAHwAQ8C/wGAAQECAAHA
        AQMC/wGAAQECAAGAAQEBgAEBAYABAQIAAYABAQGAAQEBgAEBBAABgAEBAYABAQQAAYABAQGAAQEEAAGA
        AQEBgAEBBAABgAEBAYABAQQAAYABAQGAAQEEAAGAAQEBgAEBBAABgAEBAYABAQQAAYABAQGAAQECAAGA
        AQEBgAEBAYABAQIAAYABAQL/AYABAQIAAcABAwL/AYABAwIAAfABDwL/AYABBwIACw==
</value>
  </data>
</root>